import { stringUnion } from "../../utils/DecoderUtils.ts";
import { string, union } from "typescript-json-decoder";

export const decodeCodingSystem = union(
  stringUnion(
    "ACR",
    "ALPHAID2006",
    "ALPHAID2007",
    "ALPHAID2008",
    "ALPHAID2009",
    "ALPHAID2010",
    "ALPHAID2011",
    "ANS+",
    "ART",
    "AS4",
    "AS4E",
    "ATC",
    "C4",
    "CAPECC",
    "CAS",
    "CCC",
    "CD2",
    "CDCA",
    "CDCEDACUITY",
    "CDCM",
    "CDCOBS",
    "CDCPHINVS",
    "CDCREC",
    "CDS",
    "CE",
    "CLP",
    "CPTM",
    "CST",
    "CVX",
    "DCM",
    "E",
    "E5",
    "E6",
    "E7",
    "ENZC",
    "EPASRS",
    "FDAUNII",
    "FDDC",
    "FDDX",
    "FDK",
    "FIPS5_2",
    "FIPS6_4",
    "GDRG2004",
    "GDRG2005",
    "GDRG2006",
    "GDRG2007",
    "GDRG2008",
    "GDRG2009",
    "GMDC2004",
    "GMDC2005",
    "GMDC2006",
    "GMDC2007",
    "GMDC2008",
    "GMDC2009",
    "HB",
    "HCPCS",
    "HCPT",
    "HHC",
    "HI",

    "HOT",
    "HPC",
    "I10",
    "I10G2004",
    "I10G2005",
    "I10G2006",
    "I10P",
    "I9",
    "I9C",
    "I9CDX",
    "I9CP",
    "IBT",

    "IC2",
    "ICD10AM",
    "ICD10CA",
    "ICD10GM2007",
    "ICD10GM2008",
    "ICD10GM2009",
    "ICD10GM2010",
    "ICD10GM2011",
    "ICDO",
    "ICDO2",
    "ICDO3",
    "ICS",
    "ICSD",
    "ISO",
    "ISO3166_1",
    "ISO3166_2",
    "ISO4217",
    "ISO639",
    "ITIS",
    "IUPC",
    "IUPP",
    "JC10",
    "JC8",
    "JJ1017",
    "L",
    "LB",
    "LN",
    "MCD",
    "MCR",
    "MDC",
    "MDDX",
    "MEDC",
    "MEDR",
    "MEDX",
    "MGPI",
    "MVX",
    "NAICS",
    "NDA",
    "NDC",
    "NDFRT",
    "NIC",
    "NIP001",
    "NIP002",
    "NIP004",
    "NIP007",
    "NIP008",
    "NIP009",
    "NIP010",
    "NND",
    "NPI",
    "NUBC",
    "NULLFL",
    "O301",
    "O3012004",
    "O3012005",
    "O3012006",
    "OHA",
    "OPS2007",
    "OPS2008",
    "OPS2009",
    "OPS2010",
    "OPS2011",
    "PHINQUESTION",
    "PLR",
    "PLT",
    "POS",
    "RC",
    "RXNORM",
    "SCT",
    "SCT2",
    "SDM",
    "SIC",
    "SNM",
    "SNM3",
    "SNT",
    "SOC",
    "UB04FL14",
    "UB04FL15",
    "UB04FL17",
    "UB04FL31",
    "UB04FL35",
    "UB04FL39",
    "UC",
    "UCUM",
    "UMD",
    "UML",
    "UPC",
    "UPIN",
    "USPS",
    "W1",
    "W2",
    "W4",
    "WC",
  ),
  (
    value: unknown,
  ):
    | `99${string}`
    | `X12De${number}`
    | `NCPDP${number}${string}`
    | `ISO${number}`
    | `HL7${number}`
    | `IBT${number}` => {
    const strValue = string(value);
    if (strValue.match(/99\w{3}/)) {
      return strValue as `99${string}`;
    } else if (strValue.match(/X12De\d{4}/)) {
      return strValue as `X12De${number}`;
    } else if (strValue.match(/NCPDP\d{4}\w{3}/)) {
      return strValue as `NCPDP${number}${string}`;
    } else if (strValue.match(/ISO\d{4}/)) {
      return strValue as `ISO${number}`;
    } else if (strValue.match(/HL7\d{4}/)) {
      return strValue as `HL7${number}`;
    } else if (strValue.match(/IBT\d{4}/)) {
      return strValue as `IBT${number}`;
    }

    throw "Could not match any of the special Coding System";
  },
);
